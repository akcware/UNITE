<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <title>Messaging system - UNITE</title>
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="A cool thing made with Glitch">
  <link id="favicon" rel="icon" href="https://glitch.com/edit/favicon-app.ico" type="image/x-icon">
  <link rel="stylesheet" href="/style.css">
  <link rel="stylesheet" href="/messages.css">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
  <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
  <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>  
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
  <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"
  integrity="sha256-VazP97ZCwtekAsvgPBSUwPFKdrwD3unUfSGVYrahUqU=" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>
  <script src="https://cdn.jsdelivr.net/gh/rexeze/formatTimeStamp/src/index.min.js"></script>
  <script src="/https.js"></script>
  <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js"></script> -->
  <script src="/socket.io/socket.io.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/mustache.js/3.0.1/mustache.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/qs/6.6.0/qs.min.js"></script>
  <script src="/autocomp.js"></script>
  <script type="text/javascript"> 
    $(document).ready(function() {
      //$('nav').css({'position: relative', 'z-index': 1});

      const token = $("input[name='_csrf']").val();
      const sock = io();      
      var messages = document.getElementById("messages");

      let messageInput = document.getElementById("message");
      let sender = document.getElementById("from");
      let receiver = document.getElementById("to");
      let senderName = document.getElementById("fromName");
      let receiverName = document.getElementById("toName");
      let requestId = document.getElementById("reqId");
      let reqName = document.getElementById("reqName");
      let typing = document.getElementById("typing");  
      
      const messageTemplate = $('#message-template').val();

    function putMessages(messages, data) {
      let li = document.createElement("li");
      let span = document.createElement("span");

      messages
        .appendChild(li)
        .append(data.message);
      messages
        .appendChild(span)
        .append("From " + data.sender + " to " + data.receiver + " at: " + (data.time));
      }

      function addMessages(message) {
         $('#messages1').append('<h4>' + message.sender + '</h4><p>' + message.message + '</p>');
      }

      function getMessages() {
        $.ajax({
          url: "/messages",//Two-sided: we have to check if sender is from and receiver to, but also inversely.
          data: {
            from: sender.value,
            to: receiver.value
          },
          headers: { "X-CSRF-Token": token },
          datatype: 'application/json',
          type: "GET",
          error: function() {
            console.log('error');
          },
          success: function(data) {
            var msg = document.getElementById("messages");
            for(var item of data) {
              putMessages(msg, item);
            }
          }
        });
      }

      getMessages();

      sock.on('countUpdated', (count) => {
        console.log('The connections count has been updated! It is ' + count + '.');
      });

      $('#increment').bind('click', function() {
        console.log('Clicked!');
        sock.emit('increment');
      });

      sock.on('message', (message) => {
        console.log(message);
        const html = Mustache.render(messageTemplate, {message});
        messages.append(html);
      });

      //socket.on('message', addMessages);
      
      sock.on("received", (data) => {
        let li = document.createElement("li"), span = document.createElement("span");
        messages.appendChild(li).append(data.message);
        messages.appendChild(span).append("From " + $('#fromName').val() + ": " + "Just now.");
        console.log("Hello, " + $('#fromName').val() + '!');
      });

      $(messageInput).append('<h3 style="color: blue">Chat about the Order "' + reqName.value + '"</h3>');

      function sendMessage(message) {
        $.ajax({
          url: "/messages",
          headers: { "X-CSRF-Token": token },
          datatype: 'application/json',
          type: "POST",
          data: message,
          success: function(data) {
            }
          });
      }

      $("#form").submit(function(e) {
        e.preventDefault(); // prevents page reloading
        $('#send').attr('disabled', 'disabled');
        messages.appendChild(li).append($("#message").val());
        $("#message")
          .val("")
          .focus();
        
        let span = document.createElement("span");
        messages.appendChild(span).append("From " + obj.sender + ": " + "Just now.");
        
        let li = document.createElement("li");
       
        var obj = {
          message:$("#message").val(),
          from: sender.value,
          to: receiver.value,
          sender: $('#fromName').val(),
          receiver: $('#toName').val(),
          bidRequestId: requestId.value          
          };

        sock.emit("chatMessage", obj, (error) => {
          $('#send').removeAttr('disabled');
          
          if(error) {
            return console.error(error);
          }
          
          console.log('Message sent!', obj);
        });//Via socket.        
        //sendMessage(obj);//Via AJAX.

        
        
        
      });

    //isTyping event
    messageInput.addEventListener("keypress", (e) => {//e.target.elements
      sock.emit("typing", {
        user: "UNITE User - " + senderName.value,
        message: " is typing..." });
    });

    sock.on("notifyTyping", (data) => {
      typing.innerText = data.user + " types " + data.message;
    });

    //stop typing
    messageInput.addEventListener("keyup", (e) => {
      sock.emit("stopTyping", "");
    });

    sock.on("notifyStopTyping", (e) => {
      typing.innerText = "";
    });
  /*
    document.querySelector('#form').addEventListener('submit', (e) => {
      e.preventDefault();
      const msg = e.target.elements.message.value;
      socket.emit('sendMessage', msg);
    });

    $("#send").click(function() {//Form submit
      //e.target.elements.message.value = the message body, in case instead of send we had the form ID.
    //socket.emit('sendMessage', messageObj);
     sendMessage({
       from: sender.value,
       to: receiver.value,
       sender: $('#fromName').val(),
       receiver: $('#toName').val(),
       bidRequestId: reqId.value,
       message:$("#message").val()
       });
    });*/   
      
    $('#sendLocation').bind('click', function() {
      if(!navigator.geolocation) {
        return alert('Geolocation not supported at your endpoint. WEe are sorry fr the inconvenience.');
      }
      
      $('#sendLocation').attr('disabled', 'disabled');
      
      navigator.geolocation.getCurrentPosition((position) => {//alert(JSON.stringify(position));
        sock.emit('sendLocation', {
          latitude: position.coords? position.coords.latitude : '45,00',
          longitude: position.coords? position.coords.longitude : '25,00'
        }, () => {
          $('#sendLocation').removeAttr('disabled');
          console.log('Location has been shared!');//Callback means feedback.
        });
      });
    });
      
  });
  </script>
</head>
  
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark" style="position: absolute; width: 100% !important;">
    <a class="navbar-brand" href="/">UNITE</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent"
      aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
  </nav>
  <div>
    <button class="btn btn-primary" id="increment" style="float: right">
      Increment
    </button>
  </div>
  <div class="container">
    <div>  
      <input type="button" class="btn btn-primary" value="Back" onclick="history.go(-1)">
    </div>
    <br>
      <div class="chat_window">
        <div class="top_menu">
          <div class="buttons">
            <div class="button close"></div>
            <div class="button minimize"></div>
            <div class="button maximize"></div>
          </div>
          <div class="title">Talk instantly to your partner
          <span title="Send your geographic location" style="color: blue; cursor: pointer" id="sendLocation"> - Send Location</span>
          </div>
        </div>
        <div style="position: center; color: brown; font-family: arial; font-size: 12pt; text-decoration: underline; font-weight: bold">
          <span id="partner1"><%= fromName %> and <%= toName %> are talking</span>
        </div>
        <br>
        <ul id="messages" class="messages">
        </ul>
        <div id="messages1" style="color: fuchsia">
        </div>
        <div class="bottom_wrapper clearfix">
          <br>
            <input type='hidden' id="name" class="form-control" placeholder=”Name”>
          <br>
          <i id="typing"></i>
            <form id="form">
              <div class="message_input_wrapper">
                <input type="hidden" name="from" id="from" value="<%= from %>"/>
                <input type="hidden" name="to" id="to" value="<%= to %>"/>
                <input type="hidden" name="reqId" id="reqId" value="<%= reqId %>"/>
                <input type="hidden" name="reqName" id="reqName" value="<%= reqName %>"/>
                <input type="hidden" name="fromName" id="fromName" value="<%= fromName %>"/>
                <input type="hidden" name="toName" id="toName" value="<%= toName %>"/>
                <input id="message" name="message" class="message_input" placeholder="Type your message here...">
              </div>
                <input type="hidden" name="_csrf" value="<%= csrfToken %>">
                <button id="send" type='submit' class="btn btn-primary send_message">Send</button>
            </form>
          </div>      
        </div>
    <script id="message-template" type="text/html">
      <div>
        <p>{{message}}</p>
      </div>
    </script>
  </div>
    
</body>
</html>
<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <title>Messaging system - UNITE</title>
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="A cool thing made with Glitch">
  <link id="favicon" rel="icon" href="https://glitch.com/edit/favicon-app.ico" type="image/x-icon">
  <link rel="stylesheet" href="/style.css">
  <link rel="stylesheet" href="/messages.css">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
  <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
  <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>  
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
  <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"
  integrity="sha256-VazP97ZCwtekAsvgPBSUwPFKdrwD3unUfSGVYrahUqU=" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>
  <script src="https://cdn.jsdelivr.net/gh/rexeze/formatTimeStamp/src/index.min.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/mustache.js/3.0.1/mustache.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/qs/6.6.0/qs.min.js"></script>
  <script src="/https.js"></script>
  <script src="/chatUsers.js"></script>
  <script src="/autocomp.js"></script>
  <script type="text/javascript">
    $(document).ready(function() {
      const token = $("input[name='_csrf']").val();
      const sock = io();
      
      //Inputs (plain JS):
      var messages = document.getElementById("messages");
      var $messages = document.getElementById("messages2");
      let messageInput = document.getElementById("message");
      let sender = document.getElementById("from");
      let receiver = document.getElementById("to");
      let senderName = document.getElementById("fromName");
      let receiverName = document.getElementById("toName");
      let username = document.getElementById("username");
      let room = document.getElementById("room");
      let requestId = document.getElementById("reqId");
      let reqName = document.getElementById("reqName");
      let typing = document.getElementById("typing");
      
      const user = {
        id: sock.id,
        username: username.value,
        room: room.value
      }
      
      user = addUsers(user.id, user.username, user.room);
                                  
      //Templating:
      const messageTemplate = $('#message-template').text();
      const locationMessageTemplate = $('#location-message-template').text();      
      const sidebarTemplate = $('#sidebar-template').text();      
                                  
      if(reqName.value && reqName.value != 'None') {
          $('<h4 style="color: blue">Chat about the Order "' + reqName.value + '"</h3>').insertBefore($(messageInput));
      } else {
        $('<h4 style="color: fuchsia">Supervisor has come in: "' + username.value + '"</h3>').insertBefore($(messageInput));
      }      
      
      function putMessages(messages, data) {
        let li = document.createElement("li");
        let span = document.createElement("span");
        messages
          .appendChild(li)
          .append(data.message);
        messages
          .appendChild(span)
          .append("From " + data.sender + " to " + data.receiver + " at: " + (data.time));
        }
              
      alert(1991);
                                  
        function addMessages(message) {
           $('#messages1').append('<h4>' + message.sender + '</h4><p>' + message.message + '</p>');
        }
                                  
        function getMessages() {
          $.ajax({
            url: "/messages",//Two-sided: we have to check if sender is from and receiver to, but also inversely.
            data: {
              from: sender.value,
              to: receiver.value
            },
            headers: { "X-CSRF-Token": token },
            datatype: 'application/json',
            type: "GET",
            error: function() {
              console.log('error');
            },
            success: function(data) {
              var msg = document.getElementById("messages");
              for(var item of data) {
                putMessages(msg, item);
              }
              $(msg).append('<br>');
            }
          });
        }
      
        getMessages();
      
        sock.on('countUpdated', (count) => {
          console.log('The connections count has been updated! It is ' + count + '.');
        });
      
        $('#increment').bind('click', function() {
          console.log('Clicked!');
          sock.emit('increment');
        });
      
        function sendMessage(message) {
          $.ajax({
            url: "/messages",
            headers: { "X-CSRF-Token": token },
            datatype: 'application/json',
            type: "POST",
            data: message,
            success: function(data) {
              }
            });
        }
      
        $("#message-form").submit(function(e) {
            e.preventDefault();//prevents page reloading
            var msg = {
               from: sender.value,
               to: receiver.value,
               sender: $('#fromName').val(),
               receiver: $('#toName').val(),
               bidRequestId: !requestId.value || requestId.value.length < 12? null : requestId.value,
               //bidRequestName: reqName.value == 'None'? null : reqName.value,
               message: $("#message").val()
            }
            
            //sock.emit('sendMessage', msg);
            sock.emit("sendMessage", msg, (error) => {alert(6);
              $('#send').removeAttr('disabled');
              if(typeof error !== 'undefined') {
                 $("#message").val("").focus();
                return false;
              }
              let li = document.createElement("li");
              messages.appendChild(li).append($("#message").val());
              $("#message").val("").focus();
              let span = document.createElement("span");
              messages.appendChild(span).append("From " + $('#fromName').val() + " to " + $('#toName').val() + ": " + "Just now.");
              console.log('Message sent! ', obj);
            });
            $('#send').attr('disabled', 'disabled');
            //sendMessage(obj);//Via AJAX.
        });
      
        //socket.on('message', addMessages);
        sock.on("received", (data) => {
          let li = document.createElement("li"), span = document.createElement("span");
          messages.appendChild(li).append(data.message);
          messages.appendChild(span).append("From " + $('#fromName').val() + " to " + $('#toName').val() + ": " + "Just now.");
          console.log("Hello, " + $('#fromName').val() + '!');
        });
                                

      
      messageInput.addEventListener("keypress", (e) => {//e.target.elements
        sock.emit("typing", {
          user: "UNITE User - " + senderName.value,
          message: " is typing..." });
      });
                                  
      sock.on("notifyTyping", (data) => {
        typing.innerText = data.user + " types " + data.message;
      });
      
      //stop typing
      messageInput.addEventListener("keyup", (e) => {
        sock.emit("stopTyping", "");
      });
      
      
      sock.on("notifyStopTyping", (e) => {
        typing.innerText = "";
      });
      
      $('#sendLocation').bind('click', function() {
        if(!navigator.geolocation) {
          return alert('Geolocation not supported at your endpoint. We are sorry for the inconvenience.');
        }
        $('#sendLocation').attr('disabled', 'disabled');
        navigator.geolocation.getCurrentPosition((position) => {
          sock.emit('sendLocation', {
            latitude: position.coords? position.coords.latitude : '45,00',
            longitude: position.coords? position.coords.longitude : '25,00'
          }, () => {
            $('#sendLocation').removeAttr('disabled');
            console.log('Location has been shared!');//Callback means feedback.
        });
      });
    });
      
        alert(8);            
        const {username, room} = {user.username, user.room};
        alert(Qs.parse(location.search, {ignoreQueryPrefix: true}));
        
        sock.emit('join', { username, room }, (error) => {
          if(error) {
            alert(error);
            location.href = '/';
          }
        });
/*      


        sock.on('roomData', ({ room, users }) => {
          console.log(room + '\n' + users);
          const html = Mustache.render(sidebarTemplate, {
            room, users
          });
          $('#sidebar').text(html);
        });

        const autoscroll = () => {
          //var $messages = $('#messages2')[0];        
          const $newMessage = $messages.lastElementChild;
          const newMessageStyles = getComputedStyle($newMessage);
          const newMessageMargin = parseInt(newMessageStyles.marginBottom);
          const newMessageHeight = $newMessage.offsetHeight + newMessageMargin;
          const visibleHeight = $messages.offsetHeight;
          const containerHeight = $messages.scrollHeight;
          const scrollOffset = $messages.scrollTop + offsetHeight;

          if(containerHeight - newMessageHeight <= scrollOffset) {
            $messages.scrollTop = $messages.scrollHeight;
          }        
        };                                  
        
        sock.on('message', (message) => {
          $(messages).append(message);
          
          const html = Mustache.render(messageTemplate, {
            username: message.username,
            message: message.text,
            createdAt: moment(message.createdAt).format('HH:mm:ss A')
          });          
          
          $($messages).append(html);
          autoscroll();
        });
      
        sock.on('locationMessage', (message) => {
          console.log(url);
          const html= Mustache.render(locationMessageTemplate, {
            username: message.username,
            url: message.url,
            createdAt: moment(message.createdAt).format('HH:mm:ss A')
          });
          
          $($messages).append(html);
          autoscroll();
        });
      */
  });
  </script>
</head>
  
<body>
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark" style="position: absolute; width: 100% !important;">
    <a class="navbar-brand" href="/">UNITE</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent"
      aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
  </nav>
  
  <div class="container">       
      <div class="chat_window">
        <div class="top_menu">
          <div class="buttons">
            <div class="button close"></div>
            <div class="button minimize"></div>
            <div class="button maximize"></div>
          </div>
          <div class="title">
            <span title="Talk">Talk instantly to your partner</span>
          </div>
        </div>
        <div style="position: center; color: brown; font-family: arial; font-size: 12pt; text-decoration: underline; font-weight: bold">
          <span id="partner1"><%= fromName %> and <%= toName %> are talking</span>
        </div>
        <br>
        <ul id="messages" class="messages">
        </ul>
        <form id="message-form">
          <div class="message_input_wrapper">
            <input type="hidden" name="from" id="from" value="<%= from %>"/>
            <input type="hidden" name="to" id="to" value="<%= to %>"/>
            <input type="hidden" name="reqId" id="reqId" value="<%= reqId %>"/>
            <input type="hidden" name="reqName" id="reqName" value="<%= reqName %>"/>
            <input type="hidden" name="fromName" id="fromName" value="<%= fromName %>"/>
            <input type="hidden" name="username" id="username" value="<%= username %>"/>
            <input type="hidden" name="room" id="room" value="<%= room %>"/>
            <input type="hidden" name="toName" id="toName" value="<%= toName %>"/>
            <input id="message" name="message" class="message_input" required autocomplete="on" placeholder="Type your message here...">
          </div>
            <input type="hidden" name="_csrf" value="<%= csrfToken %>">
            <button id="send" type='submit' class="btn btn-primary send_message">Send</button>
          <br>
          <button class="btn" style="float: left" title="Send your geographic location" style="color: blue; cursor: pointer" id="sendLocation">
            Send Location
          </button>
          <button class="btn btn-primary" id="increment" style="float: right">
          Increment
        </button>
        </form>
        <div id="messages1" style="display: none; color: fuchsia">
        </div>
        
        <div class="bottom_wrapper clearfix">
          <br>
            <input type='hidden' id="name" class="form-control" placeholder=”Name”>
          <br>
          <i id="typing"></i>                  
          </div>      
        </div>
    <div>
      <div id="sidebar" class="chat_sidebar">
    </div>
  </div>
    
  <script id="message-template" type="text/html">
    <div class="message">
      <p><span class="messageName">{{username}}</span>
         <span class="messageMeta">{{createdAt}}</span>
      </p>
       <p>{{message}}</p>
    </div>
  </script>
  <script id="location-message-template" type="text/html">
    <div class="message">
      <p><span class="messageName">{{username}}</span>
         <span class="messageMeta">{{createdAt}}</span>
      </p>
      <p><a href="{{url}}" target="_blank">My current location</a></p>
    </div>
  </script>
  <script id="sidebar-template" type="text/html">
    <h2 class="room-title">{{room}}</h2>
    <h3 class="list-title">User List</h3>
    <ul class="users">
      {{#users}}
        <li>{{username}}</li>
      {{/users}}
    </ul>
  </script>
</div>
    <div class="chat">
      <div class="chat_sidebar">
        UNITE Chat Application
      </div>
      <div class="chat_main">
        <div id="messages2" class="chat_messages">
        </div>
        <div class="compose">
  <!-- Moved the form and the Send Location-->
        </div>
    </div>
  </div>
</body>
</html>